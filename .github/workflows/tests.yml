name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly dependency check

# Cache dependencies for faster builds
env:
  PIP_CACHE_DIR: ~/.cache/pip
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,all]"
    
    - name: Run unit tests
      run: |
        make test-unit
    
    - name: Run integration tests
      run: |
        make test-integration
    
    - name: Run tests with coverage
      run: |
        make test-cov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,all]"
    
    - name: Run linters
      run: |
        make lint
    
    - name: Check code formatting
      run: |
        make check-format

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,all]"
    
    - name: Run type checking
      run: |
        make type-check

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,all]"
    
    - name: Run security checks
      run: |
        make check-security

  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,all]"
    
    - name: Check for outdated dependencies
      run: |
        make check-updates

  check:
    name: Run All Checks
    runs-on: ubuntu-latest
    needs: [test, lint, type-check, security]
    if: always()
    steps:
    - name: Determine if any checks failed
      if: |
        needs.test.result != 'success' ||
        needs.lint.result != 'success' ||
        needs.type-check.result != 'success' ||
        needs.security.result != 'success'
      run: |
        echo "One or more checks failed. Please check the logs for details."
        exit 1
